<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>随想</title>
    <url>/2020/01/08/%E9%9A%8F%E6%83%B3/</url>
    <content><![CDATA[<p>关于经济形势<br>新的市场结构已经形成，旧的价值在衰退，不稳定性在增加并造成影响。</p>
<a id="more"></a>
<p>具体来说，中产阶层已经成为了市场中的消费主力，这对应着近来文娱的发展获利，中高端食品业的成功等等，其影响尚未达到峰顶，趋势仍在行进。旧有的许多产业已经达到高位，房地产，IT已经是维稳甚至下滑的阶段。生产过剩，债务泡沫，以及随之而来的劳动力过剩所造成的危机正在酝酿，国际上几乎所有国家都在沼泽上行走，等待着谁先沉没然后他者踩着它的尸体再多走一段。</p>
<p>就国内而言，可能的希望在于三个大区域（珠三角，长三角，北京区域）一体化的开发，新的技术革命的到来，新乡村新农业的开发（温铁军教授所言），最后国际形势的转变（其他国家倒下了，让出了地盘）。</p>
]]></content>
      <tags>
        <tag>index</tag>
      </tags>
  </entry>
  <entry>
    <title>云服务器搭建私有云盘</title>
    <url>/2020/01/08/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA%E7%A7%81%E6%9C%89%E4%BA%91%E7%9B%98/</url>
    <content><![CDATA[<p>租了个云服务器，想着把它利用起来。先用它搭建个私有云盘吧。<br> <a id="more"></a> </p>
<h2 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1.准备工作"></a>1.准备工作</h2><p>一个云服务器，如果是学生的话推荐阿里云学生服务器<a href="https://promotion.aliyun.com/ntms/act/campus2018.html" target="_blank" rel="noopener">阿里云学生服务器</a>，9.5元一个月。<br>有两种，<a href="https://yq.aliyun.com/articles/700446" target="_blank" rel="noopener">区别参见</a>。<br>我是使用预装的centos系统。</p>
<h2 id="2-搭建环境"><a href="#2-搭建环境" class="headerlink" title="2.搭建环境"></a>2.搭建环境</h2><p>在云服务器中搭建LAMP环境<a href="https://www.jianshu.com/p/fabe5842c0e1" target="_blank" rel="noopener">（Linux）</a>或者WNMP环境（windows）<br>预装包 </p>
<p><code>sudo yum install php-mysql php-json php-xml php-mbstring php-zip php-gd curl php-curl php-pdo</code></p>
<p>之后的操作都要在root权限下运行</p>
<h2 id="3-安装软件"><a href="#3-安装软件" class="headerlink" title="3.安装软件"></a>3.安装软件</h2><ul>
<li>获取压缩包。<pre><code>wget https://download.owncloud.org/community/owncloud-10.0.4.tar.bz2</code></pre></li>
</ul>
<ul>
<li>解压<pre><code>tar -xvf owncloud-10.0.4.tar.bz2</code></pre></li>
<li>将之移动到 /var/www/html<pre><code>mv owncloud/* /var/www/html </code></pre></li>
</ul>
<h2 id="4-修改配置Apache文件"><a href="#4-修改配置Apache文件" class="headerlink" title="4.修改配置Apache文件"></a>4.修改配置Apache文件</h2><ul>
<li><p>进入conf文件内        </p>
<pre><code>vim /etc/httpd/conf/httpd.conf</code></pre><p>修改AllowOverride none 为 AllowOverride All</p>
</li>
<li><p>更改权限</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo chown -R apache:apache /var/www/html/</span><br><span class="line">$ sudo chmod 777 /var/www/html/config/</span><br></pre></td></tr></table></figure>
</li>
<li><p>重启 Apache 服务器</p>
<pre><code>systemctl restart httpd</code></pre></li>
</ul>
<h2 id="5-在-MariaDB-上创建一个数据库，保存来自-OwnCloud-的数据"><a href="#5-在-MariaDB-上创建一个数据库，保存来自-OwnCloud-的数据" class="headerlink" title="5.在 MariaDB 上创建一个数据库，保存来自 OwnCloud 的数据"></a>5.在 MariaDB 上创建一个数据库，保存来自 OwnCloud 的数据</h2>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ mysql -u root -p</span><br><span class="line">MariaDB [(none)] &gt; create database owncloud;</span><br><span class="line">MariaDB [(none)] &gt; GRANT ALL ON owncloud.* TO ocuser@localhost IDENTIFIED BY &apos;owncloud&apos;;</span><br><span class="line">MariaDB [(none)] &gt; flush privileges;</span><br><span class="line">MariaDB [(none)] &gt; exit</span><br></pre></td></tr></table></figure>

<h2 id="6-检验"><a href="#6-检验" class="headerlink" title="6.检验"></a>6.检验</h2><ul>
<li><p>服务器配置部分完成后，现在我们可以在网页浏览器上访问 OwnCloud。打开浏览器，输入您的服务器 IP 地址，之后按照步骤认证即可。类似下图。</p>
<p>  <img src="/2020/01/08/云服务器搭建私有云盘/0.png" alt></p>
</li>
<li><p>可能的问题：php版本过低请参照<a href="https://towait.com/blog/how-to-upgrade-php-version-54-to-56-on-cento7/" target="_blank" rel="noopener">https://towait.com/blog/how-to-upgrade-php-version-54-to-56-on-cento7/</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>杂项</category>
      </categories>
  </entry>
  <entry>
    <title>win10系统设置任务计划（以自动关机为例）</title>
    <url>/2020/01/08/win10%E7%B3%BB%E7%BB%9F%E8%AE%BE%E7%BD%AE%E4%BB%BB%E5%8A%A1%E8%AE%A1%E5%88%92%EF%BC%88%E4%BB%A5%E8%87%AA%E5%8A%A8%E5%85%B3%E6%9C%BA%E4%B8%BA%E4%BE%8B%EF%BC%89/</url>
    <content><![CDATA[<p>如何通过任务计划程序设置自动关机或者类似自动执行<br>可以设置单次任务，也可以设置长期执行的任务，适合设置有规律的关机计划。</p>
<a id="more"></a>
<h2 id="1-打开程序"><a href="#1-打开程序" class="headerlink" title="1 打开程序"></a>1 打开程序</h2><p>控制面板——管理工具——任务计划程序(也可以在开始菜单左下角的搜索程序和文件中输入“任务计划程序”来找到)，创建一个基本任务。</p>
<h2 id="2-按要求设置任务"><a href="#2-按要求设置任务" class="headerlink" title="2 按要求设置任务"></a>2 按要求设置任务</h2><p>输入名称，描述可以不写，进入下一步。<br>选择任务的执行频率，继续下一步。<br>在操作中，选择启动程序。<br>在程序或脚本一栏填入shutdown即可，同样参数可选择性填写。</p>
<h2 id="3-此时即可在列表中看见该任务"><a href="#3-此时即可在列表中看见该任务" class="headerlink" title="3  此时即可在列表中看见该任务"></a>3  此时即可在列表中看见该任务</h2>]]></content>
      <categories>
        <category>杂项</category>
      </categories>
  </entry>
  <entry>
    <title>python 充分利用CPU</title>
    <url>/2020/01/07/python-%E5%85%85%E5%88%86%E5%88%A9%E7%94%A8CPU/</url>
    <content><![CDATA[<p>当利用python处理大规模数据或者运行一些耗时较长的程序时，往往会发现程序运行时CPU并没有跑满，哪怕开了多线程后CPU利用率仍然不高。这是因为在默认情况下，Python 程序是单个进程，使用单 CPU 核心执行，这意味着多核处理器只使用了一个核。「一核有难九核围观」意味着超过 50% 的算力都会被浪费。这篇文章将介绍如何解决这种情况。</p>
<a id="more"></a>
<h2 id="多线程无法增加cpu使用率的原因"><a href="#多线程无法增加cpu使用率的原因" class="headerlink" title="多线程无法增加cpu使用率的原因"></a>多线程无法增加cpu使用率的原因</h2><p>GIL 的全程为 Global Interpreter Lock ，意即全局解释器锁。在 Python 语言的主流实现 CPython 中，GIL 是一个货真价实的全局线程锁，在解释器解释执行任何 Python 代码时，都需要先获得这把锁才行，在遇到 I/O 操作时会释放这把锁。如果是纯计算的程序，没有 I/O 操作，解释器会每隔 100 次操作就释放这把锁，让别的线程有机会执行（这个次数可以通过 sys.setcheckinterval 来调整）。所以虽然 CPython 的线程库直接封装操作系统的原生线程，但 CPython 进程做为一个整体，同一时间只会有一个获得了 GIL 的线程在跑，其它的线程都处于等待状态等着 GIL 的释放。这就意味着哪怕开了多线程CPU使用率仍然不会很高。</p>
<h2 id="如何充分使用多核跑程序"><a href="#如何充分使用多核跑程序" class="headerlink" title="如何充分使用多核跑程序"></a>如何充分使用多核跑程序</h2><p>有三个办法</p>
<h3 id="multiprocessing"><a href="#multiprocessing" class="headerlink" title="multiprocessing"></a>multiprocessing</h3><p> multiprocessing 是多进程标准库，让多进程的 python 程序编写简化到类似多线程的程度，通过多进程的方式使用多个CPU核心。</p>
<h3 id="C-语言扩展机制"><a href="#C-语言扩展机制" class="headerlink" title="C 语言扩展机制"></a>C 语言扩展机制</h3><p>如果不想用多进程这样重量级的解决方案，可以改用 C/C++。当然，你也不用做的这么绝，只需要把关键部分用 C/C++ 写成 Python 扩展，其它部分还是用 Python 来写，让 Python 的归 Python，C 的归 C。一般计算密集性的程序都会用 C 代码编写并通过扩展的方式集成到 Python 脚本里（如 NumPy 模块）。这样在扩展里就完全可以用 C 创建原生线程，就可以充分利用 CPU 的计算资源了。</p>
<h3 id="ctypes"><a href="#ctypes" class="headerlink" title="ctypes"></a>ctypes</h3><p>不过，写 Python 扩展总是让人觉得很复杂。好在 Python 还有另一种与 C 模块进行互通的机制 : ctypes。ctypes 与 Python 扩展不同，它可以让 Python 直接调用任意的 C 动态库的导出函数。你所要做的只是用 ctypes 写些 python 代码即可。</p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>小白机器学习教程路线</title>
    <url>/2019/09/11/%E5%B0%8F%E7%99%BD%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%95%99%E7%A8%8B%E8%B7%AF%E7%BA%BF/</url>
    <content><![CDATA[<h2 id="一-基础性知识可参照"><a href="#一-基础性知识可参照" class="headerlink" title="一 基础性知识可参照"></a>一 基础性知识可参照</h2><p><a href="https://github.com/ZuzooVn/machine-learning-for-software-engineers" target="_blank" rel="noopener">https://github.com/ZuzooVn/machine-learning-for-software-engineers</a>  自上而下的学习路径：软件工程师的机器学习/Top-down learning path: Machine Learning for Software Engineers<br><a href="https://github.com/imhuay/Algorithm_Interview_Notes-Chinese/tree/master/A-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0" target="_blank" rel="noopener">https://github.com/imhuay/Algorithm_Interview_Notes-Chinese/tree/master/A-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0</a> 机器学习笔记/marchine learning note chinese</p>
<h2 id="二-kaggle-一个数据建模和数据分析竞赛平台"><a href="#二-kaggle-一个数据建模和数据分析竞赛平台" class="headerlink" title="二 kaggle (一个数据建模和数据分析竞赛平台)"></a>二 kaggle (一个数据建模和数据分析竞赛平台)</h2><p><a href="https://www.kaggle.com/learn/intro-to-machine-learning" target="_blank" rel="noopener">https://www.kaggle.com/learn/intro-to-machine-learning</a>  从kaggle网站中的教程中学习入门知识并实践<br>（这是一个很好的实践性教程，它可以帮助你了解一些核心的机器学习想法并帮助你建立一个机器学习模型，同时它的每一个章节都有可以在线编程的练习。最后，它导向一个很有趣的房价预测相关的比赛，这是开始kaggle的第一步。另外，如果想要在房价预测比赛中得到一个更好的结果，可以参照我的kernel（可以帮助你进入top4%）：<a href="https://www.kaggle.com/smith890/exercise-machine-learning-competitions）" target="_blank" rel="noopener">https://www.kaggle.com/smith890/exercise-machine-learning-competitions）</a><br><a href="https://www.kaggle.com/c/titanic/data" target="_blank" rel="noopener">https://www.kaggle.com/c/titanic/data</a>  泰坦尼克号：从灾难中学习机器/Titanic: Machine Learning from Disaster   </p>
<p>##待续</p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
        <tag>数据分析</tag>
      </tags>
  </entry>
  <entry>
    <title>如何搭建一个自己的博客（hexo+github）</title>
    <url>/2019/09/10/%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h2 id="1-序"><a href="#1-序" class="headerlink" title="1.序"></a>1.序</h2><p>第一篇博客就从怎么搭建的这个博客开始吧。</p>
<h2 id="2-环境配置与准备"><a href="#2-环境配置与准备" class="headerlink" title="2.环境配置与准备"></a>2.环境配置与准备</h2><p>所需要的：</p>
<ul>
<li>安装node.js（<a href="http://https://nodejs.org/en/" title="官网" target="_blank" rel="noopener">官网</a>下载安装即可）</li>
<li>安装git以及一个GitHub账号（如果不清楚请参照<a href="https://www.liaoxuefeng.com/wiki/896043488029600" title="廖雪峰git教程" target="_blank" rel="noopener">廖雪峰git教程</a>）</li>
<li>安装hexo（在已完成安装node.js的情况下，打开cmd 运行npm install -g hexo）</li>
</ul>
<h2 id="3-本地创建博客文件"><a href="#3-本地创建博客文件" class="headerlink" title="3.本地创建博客文件"></a>3.本地创建博客文件</h2><ul>
<li>新建一个存储博客文件的文件夹，例如MyBlog。</li>
<li>进入到这个文件夹内，运行git。在git bash内输入并运行 hexo init（生成博客模板）。生成完后，运行 npm install。</li>
<li>之后你的文件夹内就会生成标准的博客文件模板，文件结构如下：<br>├── _config.yml<br>├── package.json<br>├── scaffolds<br>├── source<br>|   ├── _drafts<br>|   └── _posts<br>└── themes<br>其中：_config.yml： 其中我们以后的大部分操作都会在_config.yml中进行，这个文件是我们的站点的配置文件<br>　　　　scaffolds： 模板文件，规定了我们创建一篇文章的时候最开始的样子，<br>　　　　source： 可以暂时的理解成我们文章的存放处<br>　　　　themes： 主题文件存放处。</li>
<li>之后运行 hexo server 部署到本地，就可以访问本地<a href="http://localhost:4000/" title="localhost：4000" target="_blank" rel="noopener">localhost：4000</a>看见自己的博客</li>
</ul>
<h2 id="4-github中创建用于存放博客的仓库"><a href="#4-github中创建用于存放博客的仓库" class="headerlink" title="4.github中创建用于存放博客的仓库"></a>4.github中创建用于存放博客的仓库</h2><p>　　进入github新建repo，这里要注意repository的名字一定要满足UserName.github.io(这里的UserName是你GitHub账号的名字)。这样最后才能将这个仓库当作个人主页展示。</p>
<h2 id="5-关联本地博客文件夹和GitHub"><a href="#5-关联本地博客文件夹和GitHub" class="headerlink" title="5.关联本地博客文件夹和GitHub"></a>5.关联本地博客文件夹和GitHub</h2><ul>
<li>修改本地博客文件夹下_config.yml，找到最后的deploy部分。修改成：<pre><code>deploy:
    type: git
    repository: https://github.com/UserName/UserNamegithub.io.git
    branch: master</code></pre>其中：<br>　　type值对应的是你所部署的的服务器类型，我们这里填写git就可以。<br>　　repo是你的仓库地址，也就是仓库克隆的地址<br>　　branch不写默认是master，通常我们写成master就可以。<br>特别注意，冒号后需要空一格，例如type： git<br>完成上面的配置后，分别运行：<br>　　hexo clean       清理缓存<br>　　hexo generate 进行渲染 简写 hexo g<br>　　hexo deploy    简写为 hexo d来部署到git服务器<br>执行完后就可以打开浏览器地址，输入http://你github名字.github.io 看到效果了</li>
</ul>
<h2 id="6-开始写文章"><a href="#6-开始写文章" class="headerlink" title="6.开始写文章"></a>6.开始写文章</h2><ul>
<li>原生方式新建文章<br>Hexo的项目结构是在网站根目录的<code>source/_posts</code> 目录下存放你的博客文档，以.md文档格式存储，默认已存在一个hello-world.md文章<br>使用命令<code>hexo new &lt;title&gt;</code>创建文章，支持Markdown语法，也支持一些增强功能标签代码段，用于插入视频图片等。图片可以统一放在<code>source/images</code>目录中，并以<code>![](/images/image.jpg)</code>方式引用或者在<code>_config.yml</code> 打开 post_asset_folder 功能，将当前文章所用的图片放置到source目录下的文章同名资源目录下，以 <code>![](image.jpg)</code> 方式引用</li>
</ul>
<p>另外一些文章中提到建议使用第三方的专业图床来存放这些静态图片素材</p>
<ul>
<li>使用 Hexo Admin 插件<br>Hexo Admin 是一个本地在线式文章管理器，可以用直观可视化的方式新建、编辑博客文章、page页面，添加标签、分类等，并且支持剪贴板粘贴图片（自动在source_images_目录中创建文件）<br><code>npm install --save hexo-admin</code> 安装<br><code>hexo server -d</code>  使用<br><code>open http://localhost:4000/admin</code>  </li>
</ul>
<h2 id="7-进阶"><a href="#7-进阶" class="headerlink" title="7.进阶"></a>7.进阶</h2><p>还想要进一步个性化或者增加其他小功能的朋友，推荐参考：</p>
<p><a href="http://yearito.cn/posts/hexo-advanced-settings.html" target="_blank" rel="noopener">Hexo 搭建个人博客系列：进阶设置篇</a></p>
<p><a href="https://io-oi.me/tech/hexo-next-optimization/" target="_blank" rel="noopener">打造个性超赞博客 Hexo + NexT + GitHub Pages 的超深度优化</a></p>
<p>更多详细情况请参考官方文档（<a href="https://hexo.io/zh-cn/docs/" 官网"" target="_blank" rel="noopener">官网</a>）</p>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
